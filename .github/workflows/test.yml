name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      working-directory: ./backend
      run: |
        pytest --cov=backend --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: pwa/package-lock.json

    - name: Install PWA dependencies
      working-directory: ./pwa
      run: npm ci

    - name: Run PWA unit tests
      working-directory: ./pwa
      run: npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Upload PWA test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./pwa/coverage/lcov.info
        flags: pwa-unit
        name: pwa-unit-coverage

  e2e-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: pwa/package-lock.json

    - name: Install PWA dependencies
      working-directory: ./pwa
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./pwa
      run: npx playwright install --with-deps

    - name: Start backend server
      working-directory: ./backend
      run: |
        python -m pip install -r requirements.txt
        python main.py &
        sleep 10

    - name: Run E2E tests
      working-directory: ./pwa
      run: npx playwright test --reporter=html

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: pwa/playwright-report/
        retention-days: 30

  dashboard-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Install dashboard dependencies
      working-directory: ./dashboard
      run: npm ci

    - name: Run dashboard tests
      working-directory: ./dashboard
      run: npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Upload dashboard test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./dashboard/coverage/lcov.info
        flags: dashboard
        name: dashboard-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PWA dependencies
      working-directory: ./pwa
      run: npm ci

    - name: Start backend server
      working-directory: ./backend
      run: |
        python main.py &
        sleep 10

    - name: Start PWA server
      working-directory: ./pwa
      run: |
        npm start &
        sleep 30

    - name: Run integration tests
      working-directory: ./pwa
      run: |
        npx playwright test tests/e2e/integration.spec.js --reporter=html

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: pwa/playwright-report/
        retention-days: 30

  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      working-directory: ./pwa
      run: npm ci

    - name: Install Playwright
      working-directory: ./pwa
      run: npx playwright install --with-deps

    - name: Start backend server
      working-directory: ./backend
      run: |
        python -m pip install -r requirements.txt
        python main.py &
        sleep 10

    - name: Run performance tests
      working-directory: ./pwa
      run: |
        npx playwright test tests/e2e/performance.spec.js --reporter=html

    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: pwa/playwright-report/
        retention-days: 30

  security-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run security scan on backend
      working-directory: ./backend
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, dashboard-tests, integration-tests, performance-tests, security-tests]
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Dashboard Tests: ${{ needs.dashboard-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
